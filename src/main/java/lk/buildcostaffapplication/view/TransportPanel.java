/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package lk.buildcostaffapplication.view;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.buildcostaffapplication.controller.TransportController;
import lk.buildcostaffapplication.dto.OrderDTO;
import lk.buildcostaffapplication.dto.OrderItemDTO;
import lk.buildcostaffapplication.dto.OrderTransportDTO;

/**
 *
 * @author Binath Perera
 */
public class TransportPanel extends javax.swing.JPanel {

    /**
     * Creates new form TransportPanel
     */
    TransportController controller;
  
    public TransportPanel() {
        initComponents();
        controller=new TransportController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        orderItemsTable = new javax.swing.JTable();
        orderItemTableHeaderLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        checkBox = new javax.swing.JCheckBox();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        updateButton = new javax.swing.JButton();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Date", "Deliver/Pick Up", "Status", "Location"
            }
        ));
        ordersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ordersTable);

        orderItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SKU", "Item name", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        orderItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderItemsTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(orderItemsTable);

        orderItemTableHeaderLabel.setText("ITEMS FOR THIS ORDER");

        jLabel3.setText("Employee IDs of assigned staff and any additional details");

        checkBox.setText("Delivered/Recieved the items");

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        fromLabel.setText("From");

        toLabel.setText("To");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        jScrollPane2.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderItemTableHeaderLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fromLabel)
                        .addGap(18, 18, 18)
                        .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toLabel)
                        .addGap(18, 18, 18)
                        .addComponent(toDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(809, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromLabel)
                    .addComponent(toLabel)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(orderItemTableHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orderItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderItemsTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_orderItemsTableMouseClicked
    String[][]details=null;
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        loadOrders();
    }//GEN-LAST:event_searchButtonActionPerformed
    private void loadOrders(){
        Date itemRequestedFrom = fromDateChooser.getDate();
        Date itemRequestedTo = toDateChooser.getDate();
        if(itemRequestedFrom==null||itemRequestedTo==null){
            JOptionPane.showMessageDialog(this, "Please enter a time period");
            return;
        }
        LocalDate itemRequestedFromDate=null;
        if(itemRequestedFrom!=null)itemRequestedFromDate=LocalDate.parse(itemRequestedFrom.toInstant().atZone(ZoneId.of("GMT")).format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        LocalDate itemRequestedToDate=null;
        if(itemRequestedTo!=null)itemRequestedToDate=LocalDate.parse(itemRequestedTo.toInstant().atZone(ZoneId.of("GMT")).format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        ArrayList<OrderTransportDTO> orders=controller.search(itemRequestedFromDate,itemRequestedToDate);
        details=new String[orders.size()][2];
        int i=0;
        DefaultTableModel dtm=(DefaultTableModel) ordersTable.getModel();
        dtm.setRowCount(0);
        for(OrderTransportDTO order: orders){
            String orderId=order.getId();
            LocalDate date=order.getDate();
            String deliverOrPick=order.getDeliverOrPick();
            String location=order.getLocation();
            String status=order.isStatus()?"Ok":"No";
            details[i][0]=order.getDetails();
            details[i++][1]=status;
            dtm.addRow(new Object[]{orderId,date.toString(),deliverOrPick,status,location});
        }
    
    }
    private void ordersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseClicked
        int selectedRow = ordersTable.getSelectedRow();
        String ID= String.valueOf(ordersTable.getValueAt(selectedRow,0));
        OrderDTO order = controller.search(ID);
        
        ArrayList<OrderItemDTO> orderItems= order.getItems();
        DefaultTableModel dtm = (DefaultTableModel)orderItemsTable.getModel();
        dtm.setRowCount(0);
        for(OrderItemDTO item:orderItems){
            dtm.addRow(new Object[]{item.getSku(),item.getName(),item.getQty()});
        }
        descriptionTextArea.setText(details[selectedRow][0]);
        checkBox.setSelected(details[selectedRow][1].equals("Ok"));
    }//GEN-LAST:event_ordersTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int selectedRow = ordersTable.getSelectedRow();
        String ID= String.valueOf(ordersTable.getValueAt(selectedRow,0));
        boolean isSelected=checkBox.isSelected();
        String deliverOrPick= String.valueOf(ordersTable.getValueAt(selectedRow, 2));
        String description=descriptionTextArea.getText();
        boolean status=controller.setTransportDetails(new OrderTransportDTO(ID, deliverOrPick, isSelected, null , "", description));
        if(status){
            JOptionPane.showMessageDialog(this,"Details updated");
            loadOrders();
        }else{
            JOptionPane.showMessageDialog(this,"Failed to update");
        }
    }//GEN-LAST:event_updateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBox;
    private javax.swing.JTextArea descriptionTextArea;
    private com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel orderItemTableHeaderLabel;
    private javax.swing.JTable orderItemsTable;
    private javax.swing.JTable ordersTable;
    private javax.swing.JButton searchButton;
    private com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JLabel toLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
